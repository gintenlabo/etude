
設計メモ
========

.. note::
  このドキュメントは，デザイン用のメモ書きです．
  
  リリース版の Etude には含まれません．


Etude.Config の目的
-------------------

Boost を始めとした依存ライブラリの有無や，コンパイラのバージョンといった，細かい差異を吸収する．

また， Etude に上手く機能しないライブラリが有ったとき，それに依存しているライブラリも使用不能になるのを防ぐため， Etude の中での依存も切れるようにしたい．


マクロによる実装の切り替え
--------------------------

- コンパイラ対応やライブラリ依存など，何らかの事情により Etude 内部で実装を切り替える場合には， ``ETUDE_USING_NO_XXX`` という形のマクロが ``#define`` されているか否かが参照される

- これらマクロは， ``<etude/config.hpp>`` をインクルードしたとき，環境に応じて ``#define`` される

- カスタマイズするには， ``<etude/config.hpp>`` をインクルードする前に， ``ETUDE_USING_XXX`` と ``ETUDE_USING_NO_XXX`` のうち，片方を ``#define`` すればよい

- ``<etude/config.hpp>`` の内部では，各設定項目に対して，以下のような操作を行う

  - 対応する ``ETUDE_USING_XXX`` あるいは ``ETUDE_USING_NO_XXX`` のうち，どちらか片方または両方が ``#define`` されている場合，その設定項目に関しては何も設定しない
  
    - Etude 内部では一貫して ``ETUDE_USING_NO_XXX`` を参照するため，両方が ``#define`` されている場合には， ``ETUDE_USING_NO_XXX`` が優先されることになる
  
  - どちらも定義されていない場合には，以下のようなルールで， ``ETUDE_USING_XXX`` と ``ETUDE_USING_NO_XXX`` のうち，片方が ``#define`` される
  
    - Etude のサブライブラリは，原則として使用するように設定される
    
      - ただし， Boost に依存しているのに Boost を使わない設定になっている等，その他の設定項目から判断して明らかに使用不可能である場合には，この限りではない
    
    - Boost はデフォルトでは使用するよう設定される
    
      - Boost の有無を調べることは困難であるため
      - ``BOOST_VERSION`` が ``#define`` されているか否かによって Boost の有無を検出する方法もあるが， Etude のヘッダより先に Boost のヘッダを置くか否か，という，ほんの些細な差でライブラリの動作が変化するのは，ライブラリ使用者を無駄に混乱させるだけだ，という判断から，あえて決め打ちすることに
      - Autoconf による対応を考えているが，実現できるかは未知数
    
    - それ以外の設定項目に関しては，以下のように設定する
    
      - GCC を使う場合には， GCC のバージョンによって設定する
      
      - それ以外のケースで， ``ETUDE_USING_NO_BOOST`` が ``#define`` されておらず，かつ Boost.Config に該当する項目がある場合には， Boost.Config を見て設定する
      
      - それ以外のケースでは， gcc-4.5 の実装より，標準規格を優先する
      
        - ``noexcept`` といった， gcc-4.5 で実装されていない機能も，デフォルトでは使用される
        - それ以外の微妙な差異も，全て標準規格を優先する
      
  - Etude の内部で参照されるのは専ら ``ETUDE_USING_NO_XXX`` であるが， ``<etude/config.hpp>`` では ``ETUDE_USING_XXX`` も設定される
  
    - これは，異なるバージョンの Etude が使われるケースに対応するため
    - 新たな設定項目が追加された場合の手間を，少しでも削減する


バージョンに関するマクロ
------------------------

- ``<etude/version.hpp>`` で設定される ``ETUDE_VERSION`` でバージョンを取得

- ``BOOST_VERSION`` と同じように設定する

- それに加え，正式版でない場合には ``ETUDE_EXPERIMENTAL`` が ``#define`` される

- Etude の全てのヘッダは ``<etude/version.hpp>`` をインクルードする

  - 少なくともドキュメントに載っている全てのヘッダでインクルードするよう徹底する
  - それに対し， ``<etude/config.hpp>`` をインクルードするか否かはヘッダ依存


利便性のためのマクロ
--------------------

- 主に Etude 内部で使うが，外部でも使用できるようドキュメント化
- ``<etude/noexcept.hpp>`` など， etude 直下の各ヘッダで定義する
- ``<etude/config.hpp>`` の中身に応じて変化するマクロで，いちいち ``#ifndef ETUDE_USING_NO_XXX`` と書かずに済むようにすることが目的
- 例えば ``ETUDE_NOEXCEPT( expr )`` は， ``noexcept`` 演算子をシミュレーションするマクロ

