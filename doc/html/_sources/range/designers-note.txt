
設計メモ
========

.. note::
  このドキュメントは，デザイン用のメモ書きです．
  
  リリース版の Etude には含まれません．


Etude.Range の目的
------------------

Boost.Range や Pstade.Oven とは別アプローチの Range Library を提供する．

具体的には Iterators Must Go! のアレ．


基本的なデザイン
----------------

- ``std::vector<T>`` や ``boost::iterator_range<Iter>`` 等を Range と呼び，これらを扱っていく．

- Range には三種類ある．

  - 従来通りの，イテレータを使った Range ． Iterator Range と呼ぶ．
  - std::istream に対応する Range 等，イテレータを使わない Range ． Generalized Range と呼ぶ．
  - 後述する Range View ．

- Range を扱う上で，ライブラリ内部では，直接 Range を扱うのではなく， Range View を通じて扱う．

  - 対応する Range View を製作する関数は ``make_range_view`` ．
  
    - Iterator Range に対しては， ``etude::range::iterator_range_view<Iter>`` を返す．
    - Generalized Range に対しては，各々のクラスで定義されたものを返す．
    - Range View に対しては，受け取った Range View 自身を返す．

- Range View は，クラスとして実装する．

  - メンバ関数によるアクセスと，非メンバ関数によるアクセスの両方を提供
  
  - Range View のメンバ関数は，必要最小限のもののみを扱う．
  
    - ``empty``, ``front``, ``pop_front`` や ``operator==`` など．
  
  - Range View の非メンバ関数は，基本的にはメンバ関数から自動生成できるが，しかしユーザ定義することで効率化できるものを扱う．
  
    - ``move_front`` や ``advance_front`` ， ``for_each`` や ``find_if`` など．


Range View の要件
-----------------

Input View
^^^^^^^^^^

Input View は， View としての最低限の要件を規定する．

Input View であるためには，前提条件として，

- Move Constructible

である必要がある．

以下のような ``typedef`` が提供される．

``value_type``
  - type of elements which belongs to the range referred by the view.
  - Requires: shall be non-reference, non-cv-qualified type. 
  
``reference``
  - result type of element access functions, such as ``front()``.
  - Requires: shall be convertible to ``value_type const&``.


要求するメンバ関数は，以下のとおり：

``bool empty() const;``
  - Returns: true if the range referred by the view is empty; otherwise false.
  
``reference front() const;``
  - Precond: ``!this->empty()``
  - Returns: ( a reference to ) the first element of the range referred by the view.
  
``void pop_front();``
  - Precond: ``!this->empty()``
  - Effect: reduces the range referred by the view from left by one element.


典型的なアルゴリズムとしては，以下のようなものがある： ::

  template< class View, class F >
  inline F for_each( View view, F f )
  {
    while( !view.empty() ) {
      f( view.front() );
      view.pop_front();
    }
    return std::move(f);
  }

  template< class View, class T, class BinaryOperation >
  inline T accumulate( View view, T init, BinaryOperation op )
  {
    while( !view.empty() ) {
      init = op( std::move(init), view.front() );
      view.pop_front();
    }
    return std::move(init);
  }

  template< class View >
  inline View advance( View view, std::size_t n )
  {
    while( n --> 0 ) {
      view.pop_front();
    }
    return std::move(view);
  }


Forward View
^^^^^^^^^^^^

Forward View は， Input View の拡張であり， View として望ましい性質を規定する．

Forward View であるためには， Input View の条件に加えて，

- Default Constructible
- Copy Constructible
- Copy Assignable
- Equality Comparable

である必要がある．

典型的なアルゴリズムとしては，以下のようなものがある： ::

  template< class View1, class View2 >
  inline void rotate( View1 v1, View2 v2 )
  {
    using std::swap;
    
    if( v2.empty() ) {
      return;
    }
    View2 v2_ = v2;
    
    for(;;) {
      swap( v1.front(), v2.front() );
      v1.pop_front(); v2.pop_front();
      
      if( v1.empty() ) {
        if( v2.empty() ) {
          return;
        }
        else {
          break;
        }
      }
      else if( v2.empty() ) {
        v2 = v2_;
      }
    }
    
    View2 v3 = v2;
    for(;;) {
      swap( v2_.front(), v2.front() );
      v2_.pop_front(); v2.pop_front();
      
      if( v2.empty() ){
        if( v2_ == v3 ) {
          return;
        }
        else {
          v2 = v3;
        }
      }
      else if( v2_ == v3 ) {
        v3 = v2;
      }
    }
  }


